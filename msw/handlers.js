/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from 'msw';
import { faker } from '@faker-js/faker';
import { responseSelector } from '~/msw/utils/response';

faker.seed(1);

const baseURL = 'https://api.todo-example.com/v1';
const MAX_ARRAY_LENGTH = 20;

export const handlers = [
  http.get(`${baseURL}/todos`, async ({ request }) => {
    const resultArray = [
      [await getGetTodos200Response(), { status: 200 }],
      [await getGetTodos400Response(), { status: 400 }],
    ];

    return HttpResponse.json(...responseSelector(request, resultArray));
  }),
  http.get(`${baseURL}/todos/:id`, async ({ request }) => {
    const resultArray = [
      [await getGetTodoById200Response(), { status: 200 }],
      [await getGetTodoById400Response(), { status: 400 }],
      [await getGetTodoById404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...responseSelector(request, resultArray));
  }),
  http.put(`${baseURL}/todos/:id`, async ({ request }) => {
    const resultArray = [
      [await getUpdateTodo200Response(), { status: 200 }],
      [await getUpdateTodo400Response(), { status: 400 }],
      [await getUpdateTodo404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...responseSelector(request, resultArray));
  }),
  http.delete(`${baseURL}/todos/:id`, async ({ request }) => {
    const resultArray = [
      [undefined, { status: 204 }],
      [await getDeleteTodo400Response(), { status: 400 }],
      [await getDeleteTodo404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...responseSelector(request, resultArray));
  }),
];

export function getGetTodos200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: 1,
    title: '피아노 연습하기',
    description: '다음 주 레슨을 위한 연습하기',
    status: 'PENDING',
  }));
}

export function getGetTodos400Response() {
  return {
    code: 400,
    name: 'Bad Request',
    message: 'The request was invalid.',
  };
}

export function getGetTodoById200Response() {
  return {
    id: 1,
    title: '피아노 연습하기',
    description: '다음 주 레슨을 위한 연습하기',
    status: 'PENDING',
  };
}

export function getGetTodoById400Response() {
  return {
    code: 400,
    name: 'Bad Request',
    message: 'The request was invalid.',
  };
}

export function getGetTodoById404Response() {
  return {
    code: 400,
    name: 'Bad Request',
    message: 'The request was invalid.',
  };
}

export function getUpdateTodo200Response() {
  return {
    id: 1,
    title: '피아노 연습하기',
    description: '다음 주 레슨을 위한 연습하기',
    status: 'PENDING',
  };
}

export function getUpdateTodo400Response() {
  return {
    code: 400,
    name: 'Bad Request',
    message: 'The request was invalid.',
  };
}

export function getUpdateTodo404Response() {
  return {
    code: 400,
    name: 'Bad Request',
    message: 'The request was invalid.',
  };
}

export function getDeleteTodo400Response() {
  return {
    code: 400,
    name: 'Bad Request',
    message: 'The request was invalid.',
  };
}

export function getDeleteTodo404Response() {
  return {
    code: 400,
    name: 'Bad Request',
    message: 'The request was invalid.',
  };
}
