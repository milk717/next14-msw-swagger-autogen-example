openapi: 3.0.3
info:
  title: Simple To-Do List API
  description: |-
    This is a simple To-Do List API where users can create, read, update, and delete tasks.
  version: 1.0.0
servers:
  - url: https://api.todo-example.com/v1
tags:
  - name: todo
    description: TODO 리스트를 위한 API
paths:
  /todos:
    get:
      tags:
        - todo
      summary: 모든 TODO 리스트 목록을 조회합니다.
      description: Retrieves a list of all to-do tasks.
      operationId: getTodos
      responses:
        '200':
          description: A list of to-do tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToDo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /todos/{id}:
    get:
      tags:
        - todo
      summary: ID를 사용해 TODO 리스트를 단건 조회합니다.
      description: Retrieves a specific task by its ID.
      operationId: getTodoById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the task to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: A single to-do task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - todo
      summary: ID를 사용해 TODO 내용을 수정합니다.
      description: Updates an existing task in the to-do list.
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the task to update
          schema:
            type: integer
      requestBody:
        description: Updated task object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToDo'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToDo'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - todo
      summary: ID에 해당하는 TODO를 제거합니다.
      description: Deletes a specific task from the to-do list.
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the task to delete
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ToDo:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: The unique ID of the task
        title:
          type: string
          example: 피아노 연습하기
          description: The title of the task
        description:
          type: string
          example: 다음 주 레슨을 위한 연습하기
          description: A detailed description of the task
        status:
          type: string
          description: The status of the task
          enum:
            - PENDING
            - IN_PROGRESS
            - COMPLETED
          example: PENDING
      required:
        - id
        - title
        - status
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
          description: The HTTP status code
        name:
          type: string
          example: Bad Request
          description: The error name
        message:
          type: string
          example: The request was invalid.
          description: A detailed error message
      required:
        - code
        - name
        - message
